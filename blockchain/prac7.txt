PRACTICAL NO:7



Implement and demonstrate the use of the following in Solidity :
(I).Contracts

pragma solidity >=0.6.12 <0.9.0;
// Defining a contract
contract coontract {
 // Declaring state variables
 uint public var1;
 uint public var2;
 uint public sum;
 // Defining public function that sets the value of the 
state variables
 function set(uint x, uint y) public {
 var1 = x;
 var2 = y;
 sum = var1 + var2;
 }
 // Defining function to print the sum of state variables
 function get() public view returns (uint) {
 return sum;
 }
}



(II).Inheritance


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
// Defining parent contract
contract Parent {
 // Declaring internal state variable
 uint internal sum;
 // Defining external function to set value of internal 
state variable sum
 function setValue() external {
 uint a = 10;
 uint b = 20;
 sum = a + b;
 }
}
// Defining child contract inheriting from parent
contract Child is Parent {
 // Defining external function to return value of internal 
state variable sum
 function getValue() external view returns(uint) {
 return sum;
 }
}
// Defining caller contract
contract Caller {
 // Creating child contract object
 Child public cc = new Child();
 // Defining function to call setValue and getValue 
functions
 function testInheritance() public {
 cc.setValue();
 }
 function getResult() public view returns(uint) {
 return cc.getValue();
 }
}


2




// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Defining parent contract
contract Parent {
    // Declaring internal state variable
    uint internal sum;

    // Defining external function to set value of internal state variable sum
    function setValue() external {
        uint a = 10;
        uint b = 20;
        sum = a + b;
    }
}

// Defining child contract inheriting from parent
contract Child is Parent {
    // Defining external function to return value of internal state variable sum
    function getValue() external view returns (uint) {
        return sum;
    }
}

// Defining caller contract
contract Caller {
    // Creating child contract object
    Child public cc = new Child();

    // Defining function to call setValue and getValue functions
    function testInheritance() public {
        cc.setValue();
    }

    function getResult() public view returns (uint) {
        return cc.getValue();
    }
}




(III).Constructors


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
// Creating a contract
contract ConstructorExample {
 // Declaring state variable
 string public str;
 // Creating a constructor to set value of 'str'
 constructor() public {
 str = "GeeksForGeeks";
 }
 // Defining function to return the value of 'str'
 function getValue() public view returns (string memory) {
 return str;
 }
}

(IV).Abstract Contract


// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.2 <0.9.0;
abstract contract AbstractContract
{
function getResult() public virtual pure returns(uint);
}
contract DerivedContract is AbstractContract
{
function getResult() public override pure returns(uint)
{
uint a = 1;
uint b = 2;
uint result = a + b;
return result;
}
}
contract CallerContract
{
AbstractContract abs;
function TestAbstract() public
{
abs = new DerivedContract();
}
function getValues() public view returns (uint)
{
return abs.getResult();
}
}




(V).Interfaces


// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.2 <0.9.0;
interface Calculator
{
function getResult() external pure returns(uint);
}
contract TestContract is Calculator
{
function getResult() external pure returns(uint)
{
uint a = 1;
uint b = 2;
uint result = a + b;
return result;
}
}
contract CallerContract
{
TestContract tc = new TestContract();
function getValues() public view returns(uint)
{
return tc.getResult();
}
}






2





// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.2 <0.9.0;

interface Calculator {
    function getResult() external pure returns (uint);
}

contract TestContract is Calculator {
    function getResult() external pure override returns (uint) {
        uint a = 1;
        uint b = 2;
        uint result = a + b;
        return result;
    }
}

contract CallerContract {
    TestContract tc = new TestContract();

    function getValues() public view returns (uint) {
        return tc.getResult();
    }
}
